syntax = "proto3";
option go_package = "ask.systems/daemon/portal/gate";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service Portal {
	rpc Register(RegisterRequest) returns (Lease) {}
	rpc Renew(Lease) returns (Lease) {}
	rpc Unregister(Lease) returns (Lease) {}

	// Returns the address that will be used to connect to your server if
	// registered. It is necessary to register the correct hostname in the TLS
	// certificate signed by portal.
	rpc MyHostname(google.protobuf.Empty) returns (Hostname) {}
}

// The response proto for the [gate.PortalClient.MyHostname] RPC
message Hostname {
	string hostname = 1;
}

// The options proto when making a requests to portal to register for a reverse proxy
// path [Lease].
//
// The minimal request is to only set [gate.RegisterRequest.Pattern].
// [AutoRegister] will automatically set the CertificateRequest.
//
// See also: [tools.GenerateCertificateRequest] to parse the certificate if
// doing custom cert management.
//
// You can use [tools.TLSCertificateFromBytes] with the private key from
// the certificate request you generate to convert this into a
// [tls.Certificate] .
message RegisterRequest {
	// For HTTP: A url pattern that works with http.DefaultServMux. Ex: /images/
	// For TCP: ":tcp:port" for the port number portal should listen on. Only tcp
	// is accepted for now.
	//
	// HTTP patterns optionally accept a hostname (URL) constraint prefix. Or if
	// portal is configured to use the default hostname for no hostname patterns,
	// you can use * for the hostname to always match all URLs. For example:
	//
	//     ask.systems/images/
	//     */favicon.ico
	//
	// You car register multiple distinct patterns on the same port using
	// FixedPort. You can get a random port the first time then re-use that port
	// in later requests in FixedPort.
	//
	// Existing leases with the same pattern will be replaced
	string pattern = 1;

	// Optional: If set this port for the lease instead of getting a random port
	// assigned by portal.
	//
	// Reserves the specified port so portal will not randomly assign it to a
	// client. You can register multiple pattens on the same port if you use
	// FixedPort but the patterns must be different.
	//
	// Existing leases with the same port and pattern will be replaced
	uint32 fixed_port = 2;

	// Optional: If set, forward the requests for pattern to this IP/hostname.
	// If unset, forward requests to the IP that sent the RegisterRequest.
	//
	// It is easiest to just run assimilate on the machine you want the forwarding
	// rule for, but if you have a cpanel-only host or otherwise don't have access
	// to run arbitrary code then you can use this setting to run assimilate on
	// another machine.
	//
	// If you use this you need to be mindful of TLS and the network you're
	// sending the data over. Ideally you should set up a self-signed certificate
	// on the other machine and portal will detect TLS support. Otherwise make
	// sure you only use this with a trusted local network.
	string hostname = 6;

	// If true, remove the pattern in the URL of HTTP requests we forward to the
	// backend to hide that it is behind a reverse proxy.
	//
	// For example: If the pattern is /foo/ and the request is for /foo/index.html
	//   - If true  the request to the backend is /index.html
	//   - If false the request to the backend is /foo/index.html
	//
	// Ignored for TCP proxies.
	bool strip_pattern = 3;

	// If true, do not redirect HTTP requests to HTTPS. This means the data will
	// be sent in plain-text readable to anyone if the client requests it. Some
	// legacy systems require plain HTTP requests. Leave this off by default for
	// security, that way responses will only be readable by the client.
	//
	// Ignored for TCP proxies.
	bool allow_http = 5;

	// If set, the server will sign the certificate request with portal's
	// certificate as the root and accept connections to the signed cert. This way
	// network traffic behind the reverse proxy can be encrypted.
	//
	// Use this instead of a self signed cert.
	//
	// You can use [tools.GenerateCertificateRequest] to make this.
	// It is ASN.1 DER data.
	bytes certificate_request = 4;
}

// Information proto about a successful registration portal is storing.
//
// For the Certificate field use [tools.TLSCertificateFromBytes] for parsing the
// Certificate field data into a [*tls.Certificate] ex:
//
//   cert, err := tools.TLSCertificateFromBytes([][]byte{lease.Certificate}, privateKey)
//
// Note: privateKey comes from [tools.GenerateCertificateRequest] before you
// make the registration
message Lease {
	string pattern = 1;
	string address = 5;
	uint32 port = 2;
	google.protobuf.Timestamp timeout = 3;

	// If generate_certificate was set in the request, this is the signed x509
	// certificate to use for your server. It will be renewed with the lease.
	//
	// This is ASN.1 DER data for the leaf certificate public key.
	bytes certificate = 4;
}

// vim: set noexpandtab:
