package tools

import (
    "fmt"
    "log"
    "strings"
    "time"
    "net/smtp"
    "flag"
)

var (
    alertEmailAddr = flag.String("alert_email_addr", "",
        "Email address to send alerts to (from itself)")
    alertEmailPassword = flag.String("alert_email_password", "",
        "SMTP password for the alert email address")
    alertServerAddr = flag.String("alert_server_addr", "",
        "SMTP server address for sending alerts")


    duplicateErrorCount = 0
    lastError error
    lastErrorTime time.Time

    // When using ... this is the how long to wait before sending another email
    // for duplicate errors.
    DuplicateErrorDelay = 15 * time.Minute
)

func SendEmail(subject, message string) error {
    if *alertServerAddr == "" || *alertEmailAddr == "" || *alertEmailPassword == "" {
        log.Print("Alert emails disabled (the flags must be set)")
        return nil
    }
    headers := fmt.Sprintf("From: %v\nTo: %v\nSubject: %v\n\n",
        *alertEmailAddr, *alertEmailAddr, subject)
    // Strip the port, might only work with gmail
    authHost := (*alertServerAddr)[:strings.Index(*alertServerAddr, ":")]
    return smtp.SendMail(*alertServerAddr,
        smtp.PlainAuth("", *alertEmailAddr, *alertEmailPassword, authHost),
        *alertEmailAddr, []string{*alertEmailAddr}, []byte(headers + message))
}

func Error(message string, err error) {
    log.Printf("Alert! %v: %v", message, err)
    err = alertEmail(message, err.Error())
    if err != nil {
        log.Printf("Failed to send alert email: %v", err)
    }
}

// RepeatedError only sends one email every 
// suppressed 
func RepeatedError(message string, err error, now time.Time) {
    if lastError != nil && lastError.Error() == err.Error() &&
       now.Sub(lastErrorTime) < DuplicateErrorDelay {
        duplicateErrorCount += 1
        log.Printf("Duplicate alert: %v: %v", message, err)
    } else {
        duplicateErrorCount += 1
        alert(
            fmt.Sprintf("%v (%v duplicates suppressed)", message, duplicateErrorCount),
            err)
        duplicateErrorCount = 0
    }
    lastError = err
    lastErrorTime = now
}
