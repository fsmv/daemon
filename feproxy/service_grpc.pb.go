// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeproxyClient is the client API for Feproxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeproxyClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Lease, error)
	Renew(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Lease, error)
	Unregister(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Lease, error)
}

type feproxyClient struct {
	cc grpc.ClientConnInterface
}

func NewFeproxyClient(cc grpc.ClientConnInterface) FeproxyClient {
	return &feproxyClient{cc}
}

func (c *feproxyClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Feproxy/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feproxyClient) Renew(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Feproxy/Renew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feproxyClient) Unregister(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Feproxy/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeproxyServer is the server API for Feproxy service.
// All implementations must embed UnimplementedFeproxyServer
// for forward compatibility
type FeproxyServer interface {
	Register(context.Context, *RegisterRequest) (*Lease, error)
	Renew(context.Context, *Lease) (*Lease, error)
	Unregister(context.Context, *Lease) (*Lease, error)
	mustEmbedUnimplementedFeproxyServer()
}

// UnimplementedFeproxyServer must be embedded to have forward compatible implementations.
type UnimplementedFeproxyServer struct {
}

func (UnimplementedFeproxyServer) Register(context.Context, *RegisterRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFeproxyServer) Renew(context.Context, *Lease) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (UnimplementedFeproxyServer) Unregister(context.Context, *Lease) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedFeproxyServer) mustEmbedUnimplementedFeproxyServer() {}

// UnsafeFeproxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeproxyServer will
// result in compilation errors.
type UnsafeFeproxyServer interface {
	mustEmbedUnimplementedFeproxyServer()
}

func RegisterFeproxyServer(s grpc.ServiceRegistrar, srv FeproxyServer) {
	s.RegisterService(&Feproxy_ServiceDesc, srv)
}

func _Feproxy_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeproxyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feproxy/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeproxyServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feproxy_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeproxyServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feproxy/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeproxyServer).Renew(ctx, req.(*Lease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feproxy_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeproxyServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feproxy/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeproxyServer).Unregister(ctx, req.(*Lease))
	}
	return interceptor(ctx, in, info, handler)
}

// Feproxy_ServiceDesc is the grpc.ServiceDesc for Feproxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feproxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Feproxy",
	HandlerType: (*FeproxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Feproxy_Register_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _Feproxy_Renew_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Feproxy_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
